//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle

  let reuseIdentifier = reuseIdentifier()

  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.nib.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 7 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `banner`.
    var banner: RswiftResources.ImageResource { .init(name: "banner", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_home`.
    var ic_home: RswiftResources.ImageResource { .init(name: "ic_home", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_location`.
    var ic_location: RswiftResources.ImageResource { .init(name: "ic_location", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_noti`.
    var ic_noti: RswiftResources.ImageResource { .init(name: "ic_noti", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_plus`.
    var ic_plus: RswiftResources.ImageResource { .init(name: "ic_plus", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_search`.
    var ic_search: RswiftResources.ImageResource { .init(name: "ic_search", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_user`.
    var ic_user: RswiftResources.ImageResource { .init(name: "ic_user", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.nib` struct is generated, and contains static references to 7 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `BannerTableViewCell`.
    var bannerTableViewCell: RswiftResources.NibReferenceReuseIdentifier<BannerTableViewCell, BannerTableViewCell> { .init(name: "BannerTableViewCell", bundle: bundle, identifier: "BannerTableViewCell") }

    /// Nib `HomeHeaderTableViewCell`.
    var homeHeaderTableViewCell: RswiftResources.NibReferenceReuseIdentifier<HomeHeaderTableViewCell, HomeHeaderTableViewCell> { .init(name: "HomeHeaderTableViewCell", bundle: bundle, identifier: "HomeHeaderTableViewCell") }

    /// Nib `LocationTableViewCell`.
    var locationTableViewCell: RswiftResources.NibReferenceReuseIdentifier<LocationTableViewCell, LocationTableViewCell> { .init(name: "LocationTableViewCell", bundle: bundle, identifier: "LocationTableViewCell") }

    /// Nib `RecentFoodPostTableViewCell`.
    var recentFoodPostTableViewCell: RswiftResources.NibReferenceReuseIdentifier<RecentFoodPostTableViewCell, RecentFoodPostTableViewCell> { .init(name: "RecentFoodPostTableViewCell", bundle: bundle, identifier: "RecentFoodPostTableViewCell") }

    /// Nib `RecentVisitTableViewCell`.
    var recentVisitTableViewCell: RswiftResources.NibReferenceReuseIdentifier<RecentVisitTableViewCell, RecentVisitTableViewCell> { .init(name: "RecentVisitTableViewCell", bundle: bundle, identifier: "RecentVisitTableViewCell") }

    /// Nib `RestaurantCollectionViewCell`.
    var restaurantCollectionViewCell: RswiftResources.NibReferenceReuseIdentifier<RestaurantCollectionViewCell, RestaurantCollectionViewCell> { .init(name: "RestaurantCollectionViewCell", bundle: bundle, identifier: "RestaurantCollectionViewCell") }

    /// Nib `RestaurantNearYouTableViewCell`.
    var restaurantNearYouTableViewCell: RswiftResources.NibReferenceReuseIdentifier<RestaurantNearYouTableViewCell, RestaurantNearYouTableViewCell> { .init(name: "RestaurantNearYouTableViewCell", bundle: bundle, identifier: "RestaurantNearYouTableViewCell") }

    func validate() throws {
      if UIKit.UIImage(named: "banner", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'banner' is used in nib 'BannerTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_location", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_location' is used in nib 'LocationTableViewCell', but couldn't be loaded.") }
    }
  }

  /// This `_R.reuseIdentifier` struct is generated, and contains static references to 7 reuse identifiers.
  struct reuseIdentifier {

    /// Reuse identifier `BannerTableViewCell`.
    let bannerTableViewCell: RswiftResources.ReuseIdentifier<BannerTableViewCell> = .init(identifier: "BannerTableViewCell")

    /// Reuse identifier `HomeHeaderTableViewCell`.
    let homeHeaderTableViewCell: RswiftResources.ReuseIdentifier<HomeHeaderTableViewCell> = .init(identifier: "HomeHeaderTableViewCell")

    /// Reuse identifier `LocationTableViewCell`.
    let locationTableViewCell: RswiftResources.ReuseIdentifier<LocationTableViewCell> = .init(identifier: "LocationTableViewCell")

    /// Reuse identifier `RecentFoodPostTableViewCell`.
    let recentFoodPostTableViewCell: RswiftResources.ReuseIdentifier<RecentFoodPostTableViewCell> = .init(identifier: "RecentFoodPostTableViewCell")

    /// Reuse identifier `RecentVisitTableViewCell`.
    let recentVisitTableViewCell: RswiftResources.ReuseIdentifier<RecentVisitTableViewCell> = .init(identifier: "RecentVisitTableViewCell")

    /// Reuse identifier `RestaurantCollectionViewCell`.
    let restaurantCollectionViewCell: RswiftResources.ReuseIdentifier<RestaurantCollectionViewCell> = .init(identifier: "RestaurantCollectionViewCell")

    /// Reuse identifier `RestaurantNearYouTableViewCell`.
    let restaurantNearYouTableViewCell: RswiftResources.ReuseIdentifier<RestaurantNearYouTableViewCell> = .init(identifier: "RestaurantNearYouTableViewCell")
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var main: main { .init(bundle: bundle) }

    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func main(bundle: Foundation.Bundle) -> main {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.launchScreen.validate()
      try self.main.validate()
    }


    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {

      }
    }

    /// Storyboard `Main`.
    struct main: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = HomeViewController

      let bundle: Foundation.Bundle

      let name = "Main"

      var homeViewController: RswiftResources.StoryboardViewControllerIdentifier<HomeViewController> { .init(identifier: "HomeViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if homeViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'homeViewController' could not be loaded from storyboard 'Main' as 'HomeViewController'.") }
      }
    }
  }
}